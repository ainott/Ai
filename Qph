#include <iostream>
#include <vector>
#include <limits.h> 

using namespace std; 

// Function to find the minimum number of multiplications needed
int matrixChainOrder(const vector<int>& p, vector<vector<int>>& m, vector<vector<int>>& s) {
    int n = p.size() - 1;
    
    for (int i = 0; i < n; i++) {
        m[i][i] = 0;
    }
    
    for (int length = 2; length <= n; length++) {
        for (int i = 0; i < n - length + 1; i++) {
            int j = i + length - 1;
            m[i][j] = INT_MAX;
            for (int k = i; k < j; k++) {
                int q = m[i][k] + m[k + 1][j] + p[i] * p[k + 1] * p[j + 1];
                if (q < m[i][j]) {
                    m[i][j] = q;
                    s[i][j] = k;
                }
            }
        }
    }
    
    return m[0][n - 1];
} 

// Function to print the optimal order
void printOptimalParens(const vector<vector<int>>& s, int i, int j) {
    if (i == j) {
        cout << "A" << i + 1;
    } else {
        cout << "(";
        printOptimalParens(s, i, s[i][j]);
        cout << " x ";
        printOptimalParens(s, s[i][j] + 1, j);
        cout << ")";
    }
} 

int main() {
    vector<int> p = {1, 7, 2, 3, 1, 5, 9};
    int n = p.size() - 1;
    vector<vector<int>> m(n, vector<int>(n, 0));
    vector<vector<int>> s(n, vector<int>(n, 0));
    
    int minMultiplications = matrixChainOrder(p, m, s);
    cout << "Minimum number of multiplications is " << minMultiplications << endl;
    cout << "Optimal order is: ";
    printOptimalParens(s, 0, n - 1);
    cout << endl;
    
    return 0;
}
